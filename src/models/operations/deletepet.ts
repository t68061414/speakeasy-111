/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePetRequest = {
  apiKey?: string | undefined;
  /**
   * Pet id to delete
   */
  petId: number;
};

/** @internal */
export const DeletePetRequest$inboundSchema: z.ZodType<
  DeletePetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_key: z.string().optional(),
  petId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
  });
});

/** @internal */
export type DeletePetRequest$Outbound = {
  api_key?: string | undefined;
  petId: number;
};

/** @internal */
export const DeletePetRequest$outboundSchema: z.ZodType<
  DeletePetRequest$Outbound,
  z.ZodTypeDef,
  DeletePetRequest
> = z.object({
  apiKey: z.string().optional(),
  petId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePetRequest$ {
  /** @deprecated use `DeletePetRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePetRequest$inboundSchema;
  /** @deprecated use `DeletePetRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePetRequest$outboundSchema;
  /** @deprecated use `DeletePetRequest$Outbound` instead. */
  export type Outbound = DeletePetRequest$Outbound;
}

export function deletePetRequestToJSON(
  deletePetRequest: DeletePetRequest,
): string {
  return JSON.stringify(
    DeletePetRequest$outboundSchema.parse(deletePetRequest),
  );
}

export function deletePetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePetRequest' from JSON`,
  );
}
