/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserByNameRequest = {
  /**
   * The name that needs to be fetched. Use user1 for testing.
   */
  username: string;
};

/** @internal */
export const GetUserByNameRequest$inboundSchema: z.ZodType<
  GetUserByNameRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
});

/** @internal */
export type GetUserByNameRequest$Outbound = {
  username: string;
};

/** @internal */
export const GetUserByNameRequest$outboundSchema: z.ZodType<
  GetUserByNameRequest$Outbound,
  z.ZodTypeDef,
  GetUserByNameRequest
> = z.object({
  username: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserByNameRequest$ {
  /** @deprecated use `GetUserByNameRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserByNameRequest$inboundSchema;
  /** @deprecated use `GetUserByNameRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserByNameRequest$outboundSchema;
  /** @deprecated use `GetUserByNameRequest$Outbound` instead. */
  export type Outbound = GetUserByNameRequest$Outbound;
}

export function getUserByNameRequestToJSON(
  getUserByNameRequest: GetUserByNameRequest,
): string {
  return JSON.stringify(
    GetUserByNameRequest$outboundSchema.parse(getUserByNameRequest),
  );
}

export function getUserByNameRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserByNameRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserByNameRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserByNameRequest' from JSON`,
  );
}
